-- lua/ai-coding-assistant/applier.lua

local M = {}

--- Applies a parsed diff object to its target buffer.
-- @param parsed_diff The diff object generated by diff.parse()
function M.apply(parsed_diff)
  -- Find the buffer corresponding to the file path from the diff
  local target_bufnr = vim.fn.bufnr(parsed_diff.file_path, true)
  if target_bufnr == -1 or not vim.api.nvim_buf_is_loaded(target_bufnr) then
    vim.notify("Target buffer for diff is not open: " .. parsed_diff.file_path, vim.log.levels.ERROR)
    return
  end

  -- We iterate through the hunks in REVERSE order.
  -- This is critical to prevent line number changes from one hunk
  -- from invalidating the line numbers of subsequent hunks.
  for i = #parsed_diff.hunks, 1, -1 do
    local hunk = parsed_diff.hunks[i]
    local changes_to_apply = {}
    local delete_count = 0

    -- In this first pass, we collect all the new lines to be added
    -- and count how many lines will be deleted.
    for _, change in ipairs(hunk.changes) do
      if change.type == "add" then
        table.insert(changes_to_apply, change.content)
      elseif change.type == "delete" then
        delete_count = delete_count + 1
      elseif change.type == "context" then
        -- For context lines, we need to get the actual content from the buffer
        local line_content = vim.api.nvim_buf_get_lines(target_bufnr, hunk.original_start_line - 1 + #changes_to_apply, hunk.original_start_line + #changes_to_apply, true)[1]
        table.insert(changes_to_apply, line_content)
      end
    end

    -- The range to be replaced starts at the hunk's original start line.
    -- The end of the range is the start line plus the number of original lines in the hunk (deleted + context lines).
    local start_line = hunk.original_start_line - 1
    local end_line = start_line + delete_count

    -- Atomically replace the old lines with the new lines.
    vim.api.nvim_buf_set_lines(target_bufnr, start_line, end_line, true, changes_to_apply)
  end

  -- After applying, clear the visual highlights.
  local highlighter = require("ai-coding-assistant.highlighter")
  highlighter.clear(target_bufnr)

  vim.notify("AI changes applied successfully to " .. parsed_diff.file_path, vim.log.levels.INFO, { title = "AI Assistant" })
end

return M
